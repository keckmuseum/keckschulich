<?php
/**
Plugin Name: Wordpress 2-Step Verification
Plugin URI: http://as247.vui30.com/blog/wordpress-2-step-verification/
Description: Wordpress 2-Step Verification adds an extra layer of security to your Wordpress Account. In addition to your username and password, you'll enter a code that generated by Android/iPhone/Blackberry app or Plugin will send you via email upon signing in.
Author: As247
Version: 1.5.2
Author URI: http://as247.vui360.com/
Compatibility: WordPress 3.0
Text Domain: wordpress-2-step-verification
Domain Path: /languages
License: GPLv2 or later
*/
if(!defined('PHP_INT_MAX')){
    define('PHP_INT_MAX',2147483647);
}
define('WP2SV_ABSPATH',dirname(__FILE__).'/');
define('WP2SV_INC',WP2SV_ABSPATH.'includes');
class Wordpress2StepVerification{
    /**
     * @var As247_OTP
     */
    var $otp;
    /**
     * @var Wp2sv_Auth
     */
    var $auth;
    /**
     * @var Wp2sv_Recovery
     */
    var $recovery;
    var $user_id;
    /**
     * @var WP_User
     */
    var $user;
    var $wp2sv_email;
    /**
     * @var String
     * Mobile device name: Android, iPhone or BlackBerry
     */
    var $wp2sv_mobile;
    var $wp2sv_dev;
    var $backup_codes;
    var $backup_codes_used;
    var $backup_codes_lock;
    var $email_sent_last;
    var $email_limit_per_day=10;
    var $max_failed_backup_code=10;
    var $error_message;
    var $wp2sv_page_menu;
    var $current_config_page;
    var $current_action;
    /**
     * @var Wp2sv_AppPass
     */
    var $app_password;
    private $is_changing_device;
    private $tmp_secret;
    private $wp2sv_init=false;

    function __construct() {
        require_once(WP2SV_INC . '/ntp.php');
        require_once(WP2SV_INC . '/otp.php');
        require_once(WP2SV_INC . '/auth.php');
        require_once(WP2SV_INC . '/app-password.php');
        require_once(WP2SV_INC . '/recovery.php');

        /**
         * To handle rest api we need wp rewrite object
         */
        add_action('after_setup_theme',array($this,'_construct'));
        //$this->_construct();
        add_action('admin_init',array($this,'init'),-PHP_INT_MAX);
        add_action('admin_init',array($this,'init'),0);
        $this->load_text_domain('wordpress-2-step-verification');
        $this->set_config_page($this->request('wp2sv_page_config'));
        $this->protectXmlRpc();//There is no init hook on XmlRpc so we need
    }
    function _construct(){
        /**
         * Try to handle as soon as possible
         */
        if(!$this->isRestRequest()) {
            add_action('init', array($this, 'init'), -PHP_INT_MAX);
            add_action('init', array($this, 'init'), 0);//in case negative priority isn't supported
        }else{
            //add_action('init',array($this,'load'));
            /**
             * Rest api request
             */
            //add_action('rest_authentication_errors',array($this,'restAuth'));
        }
    }
    function load(){
        if(!isset($this->otp)){
            $this->otp = new As247_OTP($this);
            $this->auth = new Wp2sv_Auth($this);
            $this->recovery=new Wp2sv_Recovery($this);
        }
        if(!$this->user_id) {//allow to load if we don't have current user
            $this->init_user_data();
            $this->app_password = new Wp2sv_AppPass($this->user_id);
        }
    }
    function protectXmlRpc(){
        if($this->isXmlRpcRequest()) {
            add_filter('check_password', array($this, 'check_app_pass_restrict'), PHP_INT_MAX, 4);
        }else{
            $app_pass=new Wp2sv_AppPass();
            add_action('set_auth_cookie',array($app_pass,'collect_user_token'),10,4);
            add_filter('check_password', array($this, 'check_allow_app_password'), PHP_INT_MAX, 4);
        }
    }

    function init(){
        if($this->wp2sv_init){
            return ;
        }
        $this->wp2sv_init=true;
        /**
         * Load required things
         */
        $this->load();
        $this->handle();
        add_action('admin_menu',array($this,'user_menu_add'));
        add_action('network_admin_menu',array($this,'user_menu_add'));
        add_action('wp_logout',array($this->auth,'clear_cookie'));
        add_action('wp_ajax_wp2sv',array($this,'ajax'),1);
        add_action( 'profile_personal_options', array( $this, 'profile_personal_options' ) );
        add_action( 'edit_user_profile', array( $this, 'edit_user_profile' ) );
        add_action( 'edit_user_profile_update', array( $this, 'edit_user_profile_update' ) );
        if(is_admin()) {
            add_action('admin_init',array($this,'save_data'));
            add_action( 'admin_notices', array($this,'notice') );
        }elseif(is_user_logged_in()){
            add_action('wp_footer',array($this,'user_menu_add'));
        }
    }

    function handle(){
        $this->error_message='';
        if(!$this->is_enabled())
            return;
        if($this->validate())
            return;
        if($this->is_new_day()){
            $this->cleanup_restriction();
        }
        $scale=1;
        $code=$this->post('wp2sv_code');
        $nonce=$this->post('wp2sv_nonce');
        $action=$this->post('wp2sv_action');
        $this->check_logout();

        if(($code||$action)&&!wp_verify_nonce($nonce,'wp2sv_nonce')){//submit without nonce
            wp_die('You do not have sufficient permissions to access this page.');
        }
        $method=$this->get_receive_method();
        if($method=='recovery'){
            $this->recovery->handle();
        }
        if(in_array($method,array('email','user_email'))){
            $email=$this->get_email();
            if($email) {
                $sent = get_user_meta($this->user_id, 'wp2sv_email_sent', true);
                if ($action == 'send-email' || ($this->get_available_method() == 'email' && !$sent)) {
                    if ($sent < $this->email_limit_per_day) {
                        $sent = absint($sent);
                        if ($this->send_code_to_email($email)) {
                            $sent++;
                            update_user_meta($this->user_id, 'wp2sv_email_sent', $sent);
                            update_user_meta($this->user_id, 'wp2sv_email_sent_success', true);
                        } else {
                            $this->error_message = __('The e-mail could not be sent.','wordpress-2-step-verification').' '.__('Possible reason: your host may have disabled the mail() function...', 'wordpress-2-step-verification');
                        }
                    } else {
                        $this->error_message = __("Total emails can send per day has reached limit!", 'wordpress-2-step-verification');
                    }
                }else{
                    $this->error_message='';
                }
                if ($code && get_user_meta($this->user_id, 'wp2sv_email_sent_success', true)) {
                    $scale = $sent + 1;
                    update_user_meta($this->user_id, 'wp2sv_email_sent_success', false);
                }
            }
        }

        if($code){
            if($this->get_receive_method()!='backup-codes'){
                if($this->otp->check($code,$scale)){
                    $this->code_check_ok();
                }else{
                    $this->error_message=__("The code you entered didn't verify.",'wordpress-2-step-verification');
                }
            }else{
                if($this->reached_max_failed_backup_code()){
                    $this->error_message=__("Too many failed attempts with backup codes.",'wordpress-2-step-verification');
                }else{
                    $check_backup_result=$this->check_backup_code($code);
                    if($check_backup_result===1){
                        $this->code_check_ok();
                    }else{
                        $this->fail_backup_code($code);
                        if($check_backup_result===-1) {
                            $this->error_message = __("The code you entered have already used.", 'wordpress-2-step-verification');
                        }else{
                            $this->error_message = __("The code you entered didn't verify.", 'wordpress-2-step-verification');
                        }
                    }
                }

            }
        }
        $this->get_enter_code_template();
        die;
    }

    function save_data(){
        if(!current_user_can('read'))
            return false;
        $save=$this->post('wp2sv_save');
        if(!wp_verify_nonce($save,'wp2sv_save'))
            return false;
        $action=$this->post('wp2sv_action');
        $this->current_action=$action;
        $device=$this->get_device();
        $email=$this->post('emailAddress');
        if($action=='enable'){
            if(!$device)
                return false;
            if($device=='email'){
                update_user_meta($this->user_id,'wp2sv_email',$email);
            }else{
                update_user_meta($this->user_id,'wp2sv_mobile_dev',$device);
            }
            update_user_meta($this->user_id,'wp2sv_enabled','yes');
            if($this->post('trusted')){
                $this->auth->set_cookie($this->user_id,true);
                
            }else{
                $this->auth->set_cookie($this->user_id);
                
            }update_user_meta($this->user_id,'wp2sv_user_fav_trusted',$this->post('trusted'));
            wp_redirect($this->get_url());
            exit;
        }
        if($action=='set_remember'){
            if($this->post('trusted')){
                $this->auth->set_cookie($this->user_id,1);
            }else{
                $this->auth->set_cookie($this->user_id);
                
            }update_user_meta($this->user_id,'wp2sv_user_fav_trusted',$this->post('trusted'));
            wp_redirect($this->get_url());
            exit;
        }

        if($action=='change_mobile'){
            $new_device=$this->post('settings-choose-app-type-radio');
            $this->set_config_page($new_device);
            $this->is_changing_device(true);
        }
        if($action=='change_email'){
            $this->set_config_page('email');
            $this->is_changing_device(true);
        }

        if($action=='remove_email'){
            $this->wp2sv_email='';
            update_user_meta($this->user_id,'wp2sv_email','');
        }
        if($action=='disable'){
            update_user_meta($this->user_id,'wp2sv_enabled','');
            update_user_meta($this->user_id,'last_selected_device','');
            if($this->post('wp2sv_clear_settings')){
                $this->clear_settings();
            }
        }
        if($action=='sync-clock'){
            $this->otp->sync_time();
        }
        if($action=='generate-backup-codes'){
            $this->generate_backup_codes();
        }
        if($action=='download-backup-codes'){
            $this->download_backup_codes();
        }
        
        if(!$this->wp2sv_email&&!$this->wp2sv_mobile&&in_array($action,array('remove_mobile','remove_email'))){
            update_user_meta($this->user_id,'wp2sv_enabled','');
            update_user_meta($this->user_id,'last_selected_device','');
        }
        //update data
        $this->init_user_data();
        return true;
        
    }

    function ajax(){
        if(!current_user_can('read'))
            return false;
        $action=$this->request('wp2sv_action');
        $result=array();
        switch($action){
            case 'check':
                if(is_email($this->request('email'))){
                    $result=array('result'=>'success');
                }else{
                    $result=array('result'=>'error','message'=>__('Email is invalid','wordpress-2-step-verification'));
                }
                break;
            case 'send_mail':
                $email=$this->request('email');
                if($this->send_code_to_email($email)){
                    $result=array('result'=>'success','message'=>__('Code sent.','wordpress-2-step-verification'));
                }else{
                    $result=array('result'=>'error','message'=>'<div class="w2sverror">'.__('The e-mail could not be sent.','wordpress-2-step-verification').'</div>');
                }
                break;
            case 'verify_code':
                $code=$this->request('wp2sv_code');
                $secret=$this->request('secret');
                $secret=str_replace(' ','',$secret);
                $device=$this->request('device');
                $scale=$this->request('is_email')?4:1;
                $new_email=$this->request('wp2sv_email');
                if($this->otp->check($code,$scale,$secret)){
                    if($secret&&$device){
                        $this->move_to_new_device($secret,$device);
                    }
                    if($new_email){
                        update_user_meta($this->user_id,'wp2sv_email',$new_email);
                    }
                    $result=array('result'=>'success','message'=>'<p>'.__('Your device is configured.','wordpress-2-step-verification').' </p>
<p class="last verify-success-click-next-message">'.__('Click Next to continue.','wordpress-2-step-verification').' </p>');

                }else{
                    $result=array(
                        'result'=>'error',
                        'message'=>'<div class="w2sverror">'.__('The code is incorrect. Try again.','wordpress-2-step-verification').'</div>',
                    );
                }
                break;
            case 'device_type_choice':
                $device=$this->request('device-type');
                $result=update_user_meta($this->user_id,'last_selected_device',$device);
                break;
            case 'time_sync':
                $this->otp->sync_time();
                $result=array('server_time'=>$this->otp->time(),'local_time'=>$this->otp->local_time());
                break;
            case 'generate_password':
                $app_name=$this->request('app_name');
                if($app_name){
                    $result=$this->app_password->create($app_name);
                }
                break;
            case 'revoke_password':
                $idToRemove=$this->request('i');
                $this->app_password->revoke($idToRemove);
                break;
        }
        echo json_encode($result);
        die;
    }

    function init_user_data(){
        if(function_exists('wp_get_current_user') && (!$this->user||!$this->user_id) ) {
            $this->user = wp_get_current_user();
            $this->user_id = $this->user->ID;
        }
        $this->wp2sv_email=get_user_meta($this->user_id,'wp2sv_email',true);
        $this->wp2sv_dev=get_user_meta($this->user_id,'wp2sv_mobile_dev',true);
        $this->wp2sv_mobile=$this->get_app_name($this->wp2sv_dev);
        $this->setup_user_secret();
    }
    function setup_user_secret($user_id=0){
        if(!$user_id){
            $user_id=$this->user_id;
        }
        $secret_key=get_user_meta($user_id,'wp2sv_secret_key',true);
        if(!$secret_key){
            $secret_key=$this->otp->generate_secret_key();
            update_user_meta($user_id,'wp2sv_secret_key',$secret_key);

        }
        $this->otp->set_secret_key($secret_key);
    }

    /**
     * Only allow app password, current user password will not be allowed
     * @param $check
     * @param $password
     * @param $hash
     * @param $user_id
     * @return bool
     */
    function check_app_pass_restrict($check, $password, $hash, $user_id){
        if($this->is_enabled($user_id)){
            return $this->check_app_password($user_id,$password);
        }
        return $check;
    }
    function check_allow_app_password($check,$password,$hash,$user_id){
        if($this->is_enabled($user_id)&&$this->check_app_password($user_id,$password,$match_index)){
            $GLOBALS['logged_in_with_wp2sv_app_password']=$match_index;
            //var_dump($GLOBALS);
            //die;
            return true;
        }
        return $check;
    }

    /**
     * Check app password on for user
     * @param $user_id
     * @param $password
     * @param $index
     * @return boolean true if password valid false otherwise
     */
    function check_app_password($user_id,$password,&$index=''){
        $app_pass=new Wp2sv_AppPass($user_id);
        return $app_pass->verify($password,$index);
    }


    function cleanup_restriction(){
        update_user_meta($this->user_id,'wp2sv_email_sent',0);
        update_user_meta($this->user_id,'wp2sv_backup_failed',0);
    }
    function clear_settings(){
        update_user_meta($this->user_id,'wp2sv_enabled','');
        update_user_meta($this->user_id,'wp2sv_email','');
        update_user_meta($this->user_id,'wp2sv_mobile_dev','');
        update_user_meta($this->user_id,'wp2sv_secret_key','');
        update_user_meta($this->user_id,'wp2sv_user_fav_trusted','');
        update_user_meta($this->user_id,'last_selected_device','');
        update_user_meta($this->user_id,'wp2sv_backup_codes','');
        $this->cleanup_restriction();
    }
    function get_app_name($device){
        switch($device){
            case 'android':
                $name='Android';
                break;
            case 'iphone':
                $name='iPhone';
                break;
            case 'blackberry':
                $name='BlackBerry';
            break;
            default:
                $name='';
        }
        return $name;
    }

    function configuring_device(){
        $device=$this->get_app_name($this->get_device());
        if(!$device){
            $device=__('mobile','wordpress-2-step-verification');
        }
        return $device;
    }
    function save_key(){
        echo wp_create_nonce('wp2sv_save');
    }

    function code_check_ok(){
        $remember=$this->post('wp2sv_remember');
        $this->cleanup_restriction();
        $this->auth->set_cookie($this->user_id,$remember);
        $redirect_to=wp_get_referer();
        if(!$redirect_to) {
            $redirect_to=$_SERVER['REQUEST_URI'];
        }
        wp_safe_redirect($redirect_to);
        die;
    }

    function get_backup_codes($get='codes'){
        if(!isset($this->backup_codes)) {
            $this->backup_codes = get_user_meta($this->user_id, 'wp2sv_backup_codes', true);
            if(!is_array($this->backup_codes)){
                $this->backup_codes=array();
            }
            $unused=0;
            $total=0;
            if(!empty($this->backup_codes['codes'])){
                foreach($this->backup_codes['codes'] as $code=>$is_unused){
                    $total++;
                    if($is_unused){
                        $unused++;
                    }
                }
            }

            $this->backup_codes['unused']=$unused;
            $this->backup_codes['total']=$total;
        }
        return isset($this->backup_codes[$get])?$this->backup_codes[$get]:null;
    }
    function the_backup_codes(){
        $codes=$this->get_backup_codes();
        for($i=0;$i<2;$i++) {
            $codechunk=array_slice($codes,5*$i,5,true);
            printf('<ol class="list-backup-codes" start="%s">',5*($i)+1);
            foreach ($codechunk as $code => $unused) {
                $code=substr_replace($code,' ',4,0);
                $class = $unused ? 'code-unused' : 'code-used';
                echo '<li><span class="' . $class . '">';
                echo $code;
                echo '</span></li>';
            }

            echo '</ol>';
        }
    }

    /**
     * @param $code
     * @return int 1 if valid 0 if invalid -1 if already used
     */
    function check_backup_code($code){
        $code=trim(str_replace(' ','',$code));
        $backup_codes=$this->get_backup_codes();
        if(!isset($backup_codes[$code])){
            $result=0;
        }else{
            if($backup_codes[$code]){
                $result=1;
                $backup_codes[$code]=0;
                $this->backup_codes['codes']=$backup_codes;
                update_user_meta($this->user_id,'wp2sv_backup_codes',$this->backup_codes);
            }else{
                $result=-1;
            }
        }
        return $result;
    }
    function generate_backup_codes($length=8,$total_codes=10){
        $codes=array();
        for($i=0;$i<$total_codes;$i++){
            $code='';
            for($j=0;$j<$length;$j++){
                $code.=mt_rand(0,9);
            }
            $codes[$code]=1;
        }
        $wp2sv_backup_codes=array('codes'=>$codes,'last'=>current_time('timestamp'));
        update_user_meta($this->user_id,'wp2sv_backup_codes',$wp2sv_backup_codes);
    }
    function fail_backup_code($code){
        $failed=get_user_meta($this->user_id,'wp2sv_backup_failed',true);
        $failed=absint($failed);
        update_user_meta($this->user_id,'wp2sv_backup_failed',$failed+1);
    }
    function reached_max_failed_backup_code(){
        $failed=get_user_meta($this->user_id,'wp2sv_backup_failed',true);
        $failed=absint($failed);
        return $failed>=$this->max_failed_backup_code;
    }
    function download_backup_codes(){
        $template=dirname(__FILE__).'/template/backup-codes.txt.php';
        if(file_exists($template)&&is_readable($template)) {
            /** @noinspection PhpIncludeInspection */
            include $template;
            die;
        }
    }

    /**
     * Sent code to registered email
     * @param $email
     * @return bool
     */
    function send_code_to_email($email=''){
        if(!$email){
            $email=$this->get_email();
        }
        if($email) {
            return @wp_mail($email, $this->get_email_subject(), $this->get_email_content());
        }
        return false;
    }
    function get_receive_method(){
        $method=$this->post('wp2sv_type');
        $allowed=array('email','mobile','backup-codes','user_email','others');
        if($this->can_recovery()){
            $allowed[]='recovery';
        }
        if(in_array($method,$allowed)){

            return $method;
        }
        if($method=$this->get_available_method()){
            return $method;
        }
        return 'mobile';
    }
    function get_available_method(){
        if($this->wp2sv_mobile){
            return 'mobile';
        }
        if($this->wp2sv_email){
            return 'email';
        }
        return false;
    }
    function get_email_ending(){
        $email=$this->get_email();
        if(!$email){
            return false;
        }
        $pad='';
        $end=substr($email,strpos($email,'@')-2);
        for ($i=0,$stop=strlen($email)-strlen($end);$i<$stop;$i++){
            $pad.='•';
        }
        return $pad.$end;
    }
    function get_email(){
        $email=$this->wp2sv_email;
        if($this->get_receive_method()=='user_email'||empty($email)){
            $email=$this->user->user_email;
        }
        return $email;
    }
    function can_recovery(){
        return current_user_can('administrator');
    }
    function has_email(){
        return (bool)$this->get_email();
    }
    function have_backup_codes(){
        //if($this->reached_max_failed_backup_code())
            //return false;
        return (bool)$this->get_backup_codes('unused');
    }
    function get_enter_code_template(){
        $template_file='wp2sv.php';
        $templates=array(TEMPLATEPATH.'/'.$template_file,dirname(__FILE__).'/template/'.$template_file);
        foreach($templates as $template_file){
            if(file_exists($template_file)){
                /** @noinspection PhpIncludeInspection */
                include($template_file);
                return;
            }
                
        }
        return ;
    }
    function validate(){
        return $this->user_id==$this->auth->validate_cookie();
    }
    function wp2sv_user_fav_trusted(){
        return $this->auth->is_trusted();

    }
    function enqueue_scripts(){
        wp_enqueue_script( 'wp2sv_js',plugins_url('/wp2sv.js',__FILE__),array('backbone'),'1.1',true );
        $message=__('Removing this data will turn off 2-step verification. Are you sure you want to delete this information?','wordpress-2-step-verification');
        if($this->wp2sv_email&&$this->wp2sv_mobile){
            $message='';
        }
        $translation_array = array(
            'remove_confirm'=>$message,
            'revoke'=>__('Revoke','wordpress-2-step-verification'),
            'is_enabled'=>$this->is_enabled(),
            'home'=>menu_page_url('wp2sv',false),
        );
        wp_localize_script( 'wp2sv_js', 'wp2svI10n', $translation_array );
        wp_enqueue_style( 'wp2sv_css',plugins_url('/style.css',__FILE__) );
    }
    function user_menu_add(){
        if(!function_exists('add_users_page')){
            include_once( ABSPATH . 'wp-admin/includes/plugin.php' );
        }
        $page=add_users_page( __('Wordpress 2-step verification','wordpress-2-step-verification'), __('2-Step Verification','wordpress-2-step-verification'), 'read', 'wp2sv', array($this,'config_page'));
        $this->wp2sv_page_menu=$page;
        add_action('admin_print_styles-' . $page, array($this,'enqueue_scripts'));
        add_action('admin_head-'.$page,array($this,'header'));
        add_action('admin_bar_menu',array($this,'admin_bar'));
    }

    /**
     * @param WP_Admin_Bar $wp_admin_bar
     * @return void
     */
    function admin_bar($wp_admin_bar){
        $logout=$wp_admin_bar->get_node('logout');
        $wp_admin_bar->remove_menu('logout');
        $wp_admin_bar->add_menu( array(
    		'parent' => 'user-actions',
    		'id'     => '2-step-verification',
    		'title'  => __( '2-Step Verification' , 'wordpress-2-step-verification' ),
    		'href' => menu_page_url('wp2sv',false),
        ) );
        $wp_admin_bar->add_menu( get_object_vars($logout) );
    }

    function set_config_page($page){
        $this->current_config_page=$page;
    }
    function get_device(){
        if(in_array($this->current_config_page,array('android','iphone','blackberry','email'))){
            return $this->current_config_page;
        }
        if($this->current_config_page=='auto'){
            if($this->wp2sv_dev){
                return $this->wp2sv_dev;
            }
            if($this->wp2sv_email){
                return 'email';
            }
        }

        return false;
    }

    function is_configuring(){
        return (bool)$this->current_config_page;
    }
    function config_page(){
        include(dirname(__FILE__).'/page-config.php');
    }
    function get_config_page_name(){
        $allow_pages=array('all','app','overview');
        $current_page=$this->current_config_page;
        if(!$current_page){
            $current_page='overview';
        }
        if(!in_array($current_page,$allow_pages)){
            $current_page='all';
        }
        return $current_page;
    }
    function last_page_selected($page){
        $last_page=get_user_meta($this->user_id,'last_selected_device',true);
        if($device=$this->get_device()){
            $last_page=$device;
        }
        selected($page,$last_page);
    }

    function get_current_page_config(){
        $current_page=$this->get_config_page_name();
        $page_file=dirname(__FILE__).'/page-config-'.$current_page.'.php';
        if(file_exists($page_file)){
            /** @noinspection PhpIncludeInspection */
            include $page_file;
        }
    }

    function is_new_day(){
        $today=date('Y-m-d',current_time('timestamp'));
        if($today!=get_user_meta($this->user_id,'wp2sv_lastday',true)){
            update_user_meta($this->user_id,'wp2sv_lastday',$today);
            return true;
        }
        return false;
    }
    function status($user_id=null){
        echo $this->get_status($user_id);
    }
    function get_status($user_id=null){
        if($this->is_enabled($user_id)){
            return __('ON','wordpress-2-step-verification');
        }else{
            return __('OFF','wordpress-2-step-verification');
        }
    }
    function is_enabled($user_id=null){
        if($user_id===null)
            $user_id=$this->user_id;
        $status=get_user_meta($user_id,'wp2sv_enabled',true);
        return $status=='yes';
    }
    function is_changing_device($flag=null){
        if($flag!==null){
            $this->is_changing_device=$flag;
        }
        return !empty($this->is_changing_device);
    }

    function header(){
        echo '<script type="text/javascript">';
        echo 'var wp2sv_url=\'';$this->plugin_url();echo "'";
        echo '</script>';
    }
    function plugin_url($path='',$echo=true){
        $url=plugins_url($path, __FILE__);
        if($echo) {
            echo $url;
            return '';
        }else{
            return $url;
        }
    }

    function move_to_new_device($secret,$device){
        update_user_meta($this->user_id,'wp2sv_secret_key',$secret);
        update_user_meta($this->user_id,'wp2sv_mobile_dev',$device);
        if($this->auth->is_trusted()){
            $this->auth->set_cookie($this->user_id,true);
        }else{
            $this->auth->set_cookie($this->user_id);
        }
    }
    function chart_url($w=166,$h=166){
        $secret=$this->secret_key(false);
        $display=$this->user->user_login;
        $name=parse_url(get_bloginfo('wpurl'),PHP_URL_HOST);
        $display=$name.'%3A'.$display;
        $secret_url=sprintf("otpauth://totp/%s?secret=%s&issuer=%s",$display,$secret,$name);
        $secret_url=urlencode($secret_url);
        $chart_url=sprintf("https://chart.googleapis.com/chart?chs=%sx%s&chld=L|0&cht=qr&chl=%s",$w,$h,$secret_url);
        echo $chart_url;
    }
    function secret_key($echo=true){
        if($this->is_changing_device()) {
            if(empty($this->tmp_secret)){
                $this->tmp_secret=$this->otp->generate_secret_key();
            }
            $secret = $this->tmp_secret;
        }else{
            $secret = $this->otp->get_secret_key();
        }
        $secret_arr=str_split($secret,4);
        $secret_str=implode("\n",$secret_arr);
        if($echo) {
            echo $secret_str;
        }
        return $secret;
    }
    function get_email_subject(){
        return __('Your verification code','wordpress-2-step-verification');
    }
    function get_email_content(){
        $code=$this->otp->generate();
        $code=str_pad($code[1],6,'0',STR_PAD_LEFT);
        return sprintf(__('Your verification code is %s','wordpress-2-step-verification'),$code);
    }
    function edit_user_profile_update($user_id){
        if(!current_user_can('edit_users'))
            return false;
        if($this->post('wp2sv-turn-off')){
            update_user_meta($user_id,'wp2sv_enabled','');
        }
        return true;
    }
    function edit_user_profile($user){
        ?>
        <h3><?php _e('2-Step Verification','wordpress-2-step-verification');?></h3>
        <table class="form-table">
        <tbody>
            <tr>
                <th scope="row"><?php _e('Status:','wordpress-2-step-verification');?></th>
                <td><label><?php $this->status($user->ID);?></label>
                <?php if($this->is_enabled($user->ID)):?>
                   <input type="hidden" name="wp2sv-turn-off" id="wp2sv-turn-off"/>
                    <input type="button" class="button" id="wp2sv-turn-off-button" value="<?php _e('Turn off 2-step verification','wordpress-2-step-verification');?>"/>
                
                <?php else:
                ?>
                <span class="description">
                <?php
                _e('Only the user can turn on 2-step verification','wordpress-2-step-verification');
                ?>
                </span>
                <?php
                endif;?>
            </tr>
        </tbody>
        </table>
        <script type="text/javascript">
            if(typeof jQuery=='function') {
                jQuery('#your-profile').ready(function ($) {
                    var turnOff;
                    turnOff = $("#wp2sv-turn-off").val('');
                    $("#wp2sv-turn-off-button").click(function () {
                        turnOff.val('');
                        if (!confirm('<?php _e('Are you sure to turn off 2-step verification? Only the user can turn it on again!', 'wordpress-2-step-verification')?>'))
                            return false;
                        turnOff.val('turn-off');
                        $("#submit").click();
                        return false;
                    })
                });
            }
        </script>
        <?php
    }
    function profile_personal_options(){
        ?>
        <h3><?php _e('2-Step Verification','wordpress-2-step-verification');?></h3>
        <table class="form-table">
        <tbody>
            <tr>
                <th scope="row"><?php _e('Status:','wordpress-2-step-verification');?></th>
                <td><label><?php $this->status();?></label>
                <a class="button" href="<?php menu_page_url('wordpress-2-step-verification');?>"> <?php _e('Edit','wordpress-2-step-verification');?> </a></td>
            </tr>
        </tbody>
        </table>
        <?php
    }
    function get_url($args=array()){
        $base=menu_page_url('wp2sv',false);
        return add_query_arg($args,$base);
    }
    function get_page_url($page){
        return $this->get_url(array('wp2sv_page_config'=>$page));
    }
    function post($var,$default=null){
        return isset($_POST[$var])?$_POST[$var]:$default;
    }
    function get($var,$default=null){
        return isset($_GET[$var])?$_GET[$var]:$default;
    }
    function request($var,$default=null){
        return isset($_REQUEST[$var])?$_REQUEST[$var]:$default;
    }
    function isXmlRpcRequest(){
        return defined('XMLRPC_REQUEST')&&XMLRPC_REQUEST;
    }
    function get_password_hasher(){
        global $wp_hasher;
        // If the stored hash is longer than an MD5, presume the
        // new style phpass portable hash.
        if ( empty($wp_hasher) ) {
            require_once( ABSPATH . WPINC . '/class-phpass.php');
            // By default, use the portable hash from phpass
            $wp_hasher = new PasswordHash(8, true);
        }
        return $wp_hasher;
    }

    function load_text_domain($domain){
        $locale = apply_filters( 'plugin_locale', get_locale(), $domain );
        $locates[]=$locale;
        if($locate_parts=explode('_',$locale)){
            $locates[]=$locate_parts[0];
        }
        $path=dirname(__FILE__).'/languages';
        foreach($locates as $locale){
            $mo_file = "$path/$locale.mo";
            if($loaded=load_textdomain($domain, $mo_file))
                return $loaded;
        }
        return false;
    }
    function isRestRequest(){
        if(!function_exists('rest_api_register_rewrites')){
            return false;
        }
        rest_api_register_rewrites();
        $wp=new WP();
        $wp->add_query_var('rest_route');
        $wp->parse_request();
        return !empty($wp->query_vars['rest_route']);
    }
    protected function check_logout(){
        $action=$this->post('wp2sv_action');
        $action2=$this->get('action');
        if($action=='logout'||$action2=='logout'){
            check_admin_referer('log-out');

            $user = wp_get_current_user();

            wp_logout();

            if ( ! empty( $_REQUEST['redirect_to'] ) ) {
                $redirect_to = $requested_redirect_to = $_REQUEST['redirect_to'];
            } else {
                $redirect_to = 'wp-login.php?loggedout=true';
                $requested_redirect_to = '';
            }

            /**
             * Filter the log out redirect URL.
             *
             * @since 4.2.0
             *
             * @param string  $redirect_to           The redirect destination URL.
             * @param string  $requested_redirect_to The requested redirect destination URL passed as a parameter.
             * @param WP_User $user                  The WP_User object for the user that's logging out.
             */
            $redirect_to = apply_filters( 'logout_redirect', $redirect_to, $requested_redirect_to, $user );
            wp_safe_redirect( $redirect_to );
            exit();
        }
    }
    function notice(){
        $message=get_user_meta($this->user_id,'wp2sv_message',true);
        if($message){
            printf('<div class="notice notice-success is-dismissible"><p>%s</p></div>',$message);
        }
    }
    function have_phone(){
        return (bool)$this->wp2sv_mobile;
    }
}
new Wordpress2StepVerification();